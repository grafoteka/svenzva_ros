#!/usr/bin/env python
PACKAGE = "svenzva_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

acceleration = gen.add_group("Acceleration")
velocity = gen.add_group("Velocity")
pid = gen.add_group("PID")
pid_j1 = pid.add_group("Joint 1")
pid_j2 = pid.add_group("Joint 2")
pid_j3 = pid.add_group("Joint 3")
pid_j4 = pid.add_group("Joint 4")
pid_j5 = pid.add_group("Joint 5")
pid_j6 = pid.add_group("Joint 6")
pid_j7 = pid.add_group("Joint 7")

acceleration.add("joint_1", int_t, 0, "Motor 1 acceleration profile, each unit is 214.577 Rev/min2", 20, 0, 50)
acceleration.add("joint_2", int_t, 0, "Motor 2 acceleration profile, each unit is 214.577 Rev/min2", 40, 0, 50)
acceleration.add("joint_3", int_t, 0, "Motor 3 acceleration profile, each unit is 214.577 Rev/min2", 40, 0, 50)
acceleration.add("joint_4", int_t, 0, "Motor 4 acceleration profile, each unit is 214.577 Rev/min2", 20, 0, 50)
acceleration.add("joint_5", int_t, 0, "Motor 5 acceleration profile, each unit is 214.577 Rev/min2", 10, 0, 50)
acceleration.add("joint_6", int_t, 0, "Motor 6 acceleration profile, each unit is 214.577 Rev/min2", 10, 0, 50)
acceleration.add("joint_7", int_t, 0, "Motor 7 acceleration profile, each unit is 214.577 Rev/min2", 10, 0, 50)

velocity.add("joint_1", int_t, 0, "Motor 1 velocity profile, each unit is 0.229 RPM", 200, 0, 500)
velocity.add("joint_2", int_t, 0, "Motor 2 velocity profile, each unit is 0.229 RPM", 400, 0, 500)
velocity.add("joint_3", int_t, 0, "Motor 3 velocity profile, each unit is 0.229 RPM", 400, 0, 500)
velocity.add("joint_4", int_t, 0, "Motor 4 velocity profile, each unit is 0.229 RPM", 100, 0, 500)
velocity.add("joint_5", int_t, 0, "Motor 5 velocity profile, each unit is 0.229 RPM", 100, 0, 500)
velocity.add("joint_6", int_t, 0, "Motor 6 velocity profile, each unit is 0.229 RPM", 100, 0, 500)
velocity.add("joint_7", int_t, 0, "Motor 7 velocity profile, each unit is 0.229 RPM", 80, 0, 500)

# Joint 1 PID
pid_j1.add("joint_1_P", int_t, 0, "Motor 1 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 5000)
pid_j1.add("joint_1_I", int_t, 0, "Motor 1 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j1.add("joint_1_D", int_t, 0, "Motor 1 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 6000, 0, 16000)
pid_j1.add("joint_1_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j1.add("joint_1_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)


# Joint 2 PID
pid_j2.add("joint_2_P", int_t, 0, "Motor 2 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 5000)
pid_j2.add("joint_2_I", int_t, 0, "Motor 2 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j2.add("joint_2_D", int_t, 0, "Motor 2 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 6000, 0, 16000)
pid_j2.add("joint_2_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j2.add("joint_2_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)


# Joint 3 PID
pid_j3.add("joint_3_P", int_t, 0, "Motor 3 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 5000)
pid_j3.add("joint_3_I", int_t, 0, "Motor 3 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j3.add("joint_3_D", int_t, 0, "Motor 3 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 6000, 0, 16000)
pid_j3.add("joint_3_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j3.add("joint_3_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)


# Joint 4 PID
pid_j4.add("joint_4_P", int_t, 0, "Motor 4 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 5000)
pid_j4.add("joint_4_I", int_t, 0, "Motor 4 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j4.add("joint_4_D", int_t, 0, "Motor 4 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 6000, 0, 16000)
pid_j4.add("joint_4_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j4.add("joint_4_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)


# Joint 5 PID
pid_j5.add("joint_5_P", int_t, 0, "Motor 5 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 500, 0, 5000)
pid_j5.add("joint_5_I", int_t, 0, "Motor 5 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j5.add("joint_5_D", int_t, 0, "Motor 5 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 6000, 0, 16000)
pid_j5.add("joint_5_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j5.add("joint_5_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)


# Joint 6 PID
pid_j6.add("joint_6_P", int_t, 0, "Motor 6 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 400, 0, 5000)
pid_j6.add("joint_6_I", int_t, 0, "Motor 6 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j6.add("joint_6_D", int_t, 0, "Motor 6 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 3000, 0, 16000)
pid_j6.add("joint_6_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j6.add("joint_6_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)


# Joint 7 PID
pid_j7.add("joint_7_P", int_t, 0, "Motor 7 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 500, 0, 5000)
pid_j7.add("joint_7_I", int_t, 0, "Motor 7 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j7.add("joint_7_D", int_t, 0, "Motor 7 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 900, 0, 16000)
pid_j7.add("joint_7_Feedforward1_velocity", int_t, 0, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j7.add("joint_7_Feedforward2_acceleration", int_t, 0, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)





gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 900)
gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")], "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "svenzva_drivers", "RevelFirmwareDynamic"))
